server {
    server_name 127.0.0.1 localhost;
    root /var/www/public;
    client_max_body_size 32m;


    location ~ ^/(api|telescope|vendor/telescope)/ {
    # location / {
        add_header  X-IsBackend  1 always;
        # to allow testing backend offline this is commented out
        if ($http_IsBackend) {
            return 200;
        }

        # try to serve file directly, fallback to front controller
        # Simple requests
        try_files $uri /index.php$is_args$args;
    }

    # this allows single domain config (all routes not /api/*| will be proxied to frontend) for development
    location / {
        # tags responses so that js knows it is singledomain
        add_header  X-SingleDomain  1 always;
        # if this request is just for checking singledomain do not waste time returning response
        if ($http_IsSingleDomain) {
            return 200;
        }

        proxy_redirect                      off;
        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_read_timeout          1m;
        proxy_connect_timeout       1m;
        proxy_pass                          http://web-frontend:3000;
    }


    location ~ ^/index\.php(/|$) {
        add_header "Access-Control-Allow-Origin" * always;

        # Preflighted requests
        if ($request_method = OPTIONS) {
          add_header "Access-Control-Allow-Origin" * always;
          add_header "Access-Control-Allow-Methods" "GET,POST,PUT,PATCH,OPTIONS,HEAD,DELETE";
          add_header "Access-Control-Allow-Headers" "Authorization,Origin,X-Requested-With,Content-Type,Accept";
          return 200;
        }

        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass web-backend:9000;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param HTTPS off;
    }

    error_log  /dev/stderr;
    access_log /dev/stdout;
}
